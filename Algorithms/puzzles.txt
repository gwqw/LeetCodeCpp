    Arrays
search 2 nums in array with target sum: make dict
Longest Common Prefix in array of strings: for i: check if all symbols same
remove duplicates in sorted array: 2 iterators: where to print, what to print
remove element: 2 iterators
move zeroes to the array end: 2 iterators + swap
search insert pos in sorted array: binary search
count same nums and say n nums: go n cycles and count same elements
max sum subarray: dynamic: calc cur sum, if < 0 => to 0
merge sorted arrays: shift first to array end, 2 iterators, copy and move less
find sum in sorted array: 2 iterators from begin and from end
majority element: nth-element for median
rotate array: 1) new_i = (i+k)%n, move prev further, if cycle init++ 2) reverse array, reverse 0-k, reverse k..n
contains duplicates: use map
has duplicates in subarray size k: sliding window +set  size k
first bad version: true, true, ..., true, false, false, ..., false: binary search
reverse array: 2 iterators with swap
intersection of 2 arrays (unique): list(set(nums1) & set(nums2)) or sort and move
intersection of 2 arrays (not unique): use map[n]->cnt
some nums are twice, some once: radix sort of 1-st part, check for existance in 1-st part
array of nums, find number of moves to make all nums equal (move is inc n-1 element by 1): inc n-1 by 1 == dec 1 by 1: find min and sum all diffs
next greater element for array1 in array2: using stack, make dict[num]->next greater from arr2
shortest unsorted continuous subarray: go to the right and find rightest value < max, go to the left and find leftest value > min
max harmonic (max-min==1) subseq: make dict[value]->cnt and for each value check neighbours
max product of 3 nums: max_heap and min_heap, find 3 max and 2 mins by hand, partial sort
missing number in array: radix(count) sort. sum values, sum indexes, res = sum_ind - sum_values
array 1..n, one num -> another: 1) radix sort 2) sum and square sum
array with one unsorted value: find left sorted boundary, find right, check if del is good
longest subarray: go through array and if increasing: ++length else update max
count binary substrings like 1..10..0: counters for 1 and for 0, mode: is counting 1 or 0, change mode and update num += min(c1,c0)
array of 0, 10, 11, check if last is 0-bit: 1) go forward and check if is '0' or not. 2) check 11..10 tail (search 0 from behind), if 11 is even -- true
list of stones and list of jewels, check is stone a jewel: make set from jewels
letter case permutation (return all permutations change only letter case)
maximize distance to closest person: max 0s, and 2*size-1 for edges
find peak in peak array: binary search
2 arrays, swap 2 nums to make sum the same: make set from second and check (s1+s2)/2-v in set
split array on parities: 1) partition, 2) 2 iterators from begin and end
split array on parities2 (if i is odd: a[i] - odd): 2 iterators from begin
squares of sorted array: split neg and pos, square, merge 2 sorted arrays
non-sorted array (find amount of swaps to make it sorted): sort and compare
(011) container with most water(array of walls height): 2 iterators (b,e), move for shorter line and update square
(015) triplet in array (sum to target): sort and 2 iterators (2b, 1e)
(016) triplet in array (closed to target): sort and 2 iterators (2b, 1e)
(033) search in rotated array: bin.search: cases for pivot point
(034) equal_range: combine lower_bound (<) and upper_bound (<=)
(056) merge intervals: sort and 2 iterators
(075) sort colors: 1) count sort, 2) 2 iterators b_ones, e_ones
(078) all subsets: backtracking: for every n and for all subset, push copy subset+num
(131) pali partittion: backtrack + dp
(134) gas stations (gas and distance between): get diff, go and calc sum, if < 0, start here
(128) longest consecutive sequence: use set{}, check for +1 and for -1 in set, remove checked 
(150) reverse polish notation: stack
(152) max prod subarray: 2pass: forward and backward
(162) find peak element: binsearch
(179) array of num, concat to form largest num: convert to string, sort l = lhs+rhs, r = rhs+lhs
(215) lth largest element: nth-element, divide and counquer
(228) summary for ranges (1,2,3 -> "1->3"): go right if diff > 1: print
(238) product of array except self: product of prefixes and suffixes
(287) find duplicate number (only 1 num): binary search in number, check if less not duplicate
(347) top k frequent elemens: dict[num]->cnt make array from dict {freq, num} and partial_sort
(376) wiggle subseq (diff +,-,+): take only peaks
(377) all combination sum to target: dp with memoisation
(384) shuffle array: from end rand() index and swap with last
(416) partition array at equal sum: dp: calc all availiable sums for prefix: dp[i] = prev[i] or prev[i-x]
(454) 4 arrays, find all 4-tuples, sum = 0: precalc a+b and c+d
(456) 132-pattern: sliding window and 2 maps, monotonic stack
(487) max conseq seq of 1 (1 zero can flip to 1): go and have 2 length with flip and without
(494) calc all sums to target: 1) dp + recursion, 2) dp[prefix][sum]
(560) subarray of sum equal to target: 1) integral sum + dict, 2) if positive: sliding window
(658) find k closest to x: 1) find x and enlarge window with 2 iterators, 2) binary search of window
(739) daily temperatures (count days to wait warmer t): monotonic stack
(974) array of int, return number of sums // target: calc sum for prefix and dict[resid]
(1004) max consec. of 1 (can flip k zeros): ones count, zero_count
(1395) for array count i,j,k (a[i] < a[j] < a[k] or >): for center find lesser and greater cnt from the left and from the right
(1493) longest array after deleting one: use flip cnt and not used

    String
search word in text: poly-hash (Rabin-Karp)
length of last word: go from end and search ' '
valid palindrome: 2 iterators: go from begin and end (ignore any bad symbols)
isomorphic string (can be obtained by replacing characters): go and make assoc map
valid anagrams: dicts or sort
word pattern (pattern 'abba', a-> word1, b->word2, ... "word1 word2 .. wordn"): 2 dicts
first unique char: use dict
t shuffled from s and 1 symb is added: 1) xor or sum, 2) dict
is subsequence (deleting some symbols): dict[symb]->vector<int>(positions)
longest palindrom from string: use dict[symb]->cnt, if cnt%2=0 add cnt, else add cnt-1 and cnt first time.
compress string ("aaa"->"a3"): like unique
repeated string pattern, string consist from the same repeated pattern (s: [abcabc]): s in s[1:]+s[:-1].
check capitals for word: if 1st small -- all must be small, if 1st big -- all small or big
reverse words in string: find end of word, reverse it in-place
valid palindrome with one bad symbol: 2 iterators from begin and end and check if is palindrom. when false, check distance
array of words, find max word can be built + 1 letter (it must be in array): 1) sort lexigraph. go and check lengths, 2) 
rotated string (check if b is rotated a): find b in a+a
shortest distance to char (array for every ch in str write shortest dist to given char in str): 2 pass: go forward and write distance from char, go backward and write distance before chare (update min)
compare strings with backspaces: 2 iterators from end
reverse only letters: 2 iterators
name and typed name, where some letters can twice or triple or more, check if they same: 2 iterators
alien language (have alphabet and words, check if they sorted lexicographical): make dict and check if sorted
(003) longest substring wo repeating: sliding window with dict
(005) longest palindrom substr: dp for every length
(049) group anagrams: calc dict for every anagram, and group them.
(071) unix path: use stack
(091) decode ways decode num->letters: backtracking or dp
(139) string can be broke on words: dp (is prefix in dict and suffix can be broken) 
(151) search word, reverse it
(161) one edit distance: find diff, analyze 3 situations: compare 2 substrings
(244) sortest word distance (2 words in list): dict[word]->vector<idx>, 2 vec and use 2 iter, move <
(334) increasing triplet subseq: like find 3 mins
(394) decode string: recursion
(395) longest substring with k-repeating char: divide and conquer: divide on cnt[char]<k, if cannot divide: return length
(438) find all anagrams: sliding window + dict
(467) unique substrings in wrap alphabet: dp[letter][length] count of strings ending here
(567) str contains permutation of str2: sliding window + dict
(647) count palindrom substr: for every c, count if pali center
(1249) minimum remove to make valid parenthesis: go forward and remove bad ')', go backward and remove bad '('


    combinations
(017) letter combination as phone num: 1) backtracking, 2) fill prefixs, add each letter to each prefix
(022) generate parentheses: rec. call with '(' if have cnt, call with ')' if cnt2 < cnt1
(039) sum combination to target: sort and backtracking (add big and recursively check)
(046) permutation: for i in the end, search j lefter: a[j] < a[i], search from the end lesser and swap, reverse right part

    Nums
reverse integer: take digit, add it to answer
is number palindrom: reverse number, compare with original
roman 2 integer: go through with rules
int 2 roman: calc degree and change to letter
add 1 to nums in list: add 1 while 9
add 2 binary str: have x, y, resid
add num to long-arithm num
square root of number: binary search
single number each element twice: dict or xor
factorial trailing zeroes: res = 5 counts + 25 counts + 125 counts
num->sum of squares of digits->1 or cycle. calc_next, add to set
count primes: Eratosphen i*i < n
power of 2: n & (n-1) == false
sum digits in num until res has one digit: n - digit_sum % 9 = 0 => n % 9 == digit_sum % 9
power of 3: 1) while n % 3: n /= 3. 2) max(3^N) % n == 0
power of 4: power of 2 and n % 3 == 1
(050) pow: bin_split (recursion or iterative), iter: a^(2*n) -> (a^2)^n
(279) num is sum of squares (min elemens): dp: dp[n] = min(dp[n], dp[n-i*i]+1)
(343) split integer on sum with max product: try to add max 3 and 2 after that
(470) rand10 from rand7: generate 7s digit, generate 1s digit, shrink range

    Bits
reverse bits: take bit as digit, put bit and shift
number of 1 bit: n & (n-1) removes last one
sum of 2 integers (wo + and -): a XOR b, and resid = (a & b) << 1, while resid > 0
humming distance: xor and calc ones
find complement numbers (inverse bits): find first 1, shift <<, ~, shift>>
binary nums like 10101010: r = (x | (x << 1))>>1 = 1111111: r+1 is power of 2
(338) counting bits for num in range: dependency: repeat after pow of 2 all prev + 1

    List
merge sorted lists: 2 iterators, move less
remove in linked list: if val: make new link
remove duplicates in sorted lists: if dup: make new link, else: move forward
linked list cycle: hare and tortoise
intersection of 2 lists: calc lengths, shift longer, go while not the same. 2 pointers go to the end and start from other list.
reverse linked list: as stack
list is palindrom: reverse 2nd part and compare
delete node in lst: shift next value and move next ptr
middle in ll: 1) calc length, 2) hare and tortoise
remove nth node from the end: 1) calc lenght, 2) 2 pointers (sliding window)
copy list with rnd ptr: copy and create dict: node1->node2
cycle in ll: tortoise and hare (after meet, hare from begin)
(148)sort list: merge sort
(328)odd and even: 4 pointer: o, e, prev_o, prev_e
(023) merge k-sorted lists: min heap and add heads

    Tree
same tree: dfs(nlr)
symetric tree: dfs(nlr): p->left and q->right, p->right and q->left
max depth: dfs: max(n->left, n->right)+1
level order -> vectors: bfs or dfs(nlr)
bst from sorted array: find center, make root, recursion on left part and right part
balanced tree: get left height, right height, check if balanced
min depth: bfs gives short scheme
path sum in BT: dfs(nlr): check for sum-node->val in left and right
invert BT (mirror, fail for Max Howell): dfs(nlr): swap left and right: recursion(left), recursion(right)
LCA of BST: dfs: p <= node <= q
all paths: dfs(nlr), use one string and cut cur symbol at exit
count sum of left leaves: dfs (nlr) with from status
convertBST node.val += sum all greater: dfs(rnl)
longest path in BT: dfs(lrn) max_length = update_max(ll+rr+1), return max_line_length
tree tilt (node->right->sum_of_all_vals - node->left->sum_of_all_vals): dfs calc sums and add to tilt
is subtree: calc subtree height and check only for nodes with same height
tree to string -> 1(2(4)(5)(3): dfs(nlr), use stringstream
merge trees (sum node values): dfs(nlr)(t1, t2)
average value in level: bfs
sum of 2 nodes in tree == target: use hash_map or convert to vector
trim BST to [L,R]: recursive dfs: if not in range return trim(n->left or right), iterative: find newroot, trim left, trim right
second min value in tree like heap: use bfs with short scheme
longest path with same value: dfs(lrn)
search in bst: recursive: check node found or go to left or to right
find min dist between nodes in BST: dfs(lnr) and take prev value
leaf similar tree: dfs in parallel and compare leaves
make 'list' from bst: dfs(rnl) and fill new tree from bottom
calc sum in [L,R] in bst: recursive
univalued tree (all nodes has same values): dfs and cmp n with root
(096)unique BST (get number of them): catalan numbers, dp[i] = a[i-1] + a[i-2]a[1] + ... + a[i-j-1]*a[j] + ... + a[0]*a[i-1]
(098)validate BST: dfs(lvr)
(099)recover BST (swap 2 nodes): find 1st, 2nd and swap values
(102)level order BT: bfs of dfs to vector<vector<>>
(103)zig-zag level order BT: bfs of dfs to vector<vector<>> with reverse
(105)construct BT from pre and in: find root and recursive and left-right edge and recursion
(114)flatten BT to list same as preorder: preorder(nlr) with stack or inversePreOrder(rln) wo stack
(116)next right_ptr in node: dfs (n=l->r, connect(n->left), connect(n->right)), dfs wo queue
(208)implement trie: un_map[char]->node, bool is_leaf, string prefix
(230)kth smallest in BST: dfs lnr
(236)lowest common ancestor: dfs with 2 flags found or ptr
(337) house robber in BT: dfs with 2 sums with node and wo
(437) path sum (all sum to target): dfs + calc prefix sum to dict[sum]->cnt
(863) all nodes with distance k: search node, if search dfs and calc distance
(1448) count good nodes (node with max value from root): go from root, if val >= max: ++good_nodes
(1650) LCA for BT with ptr to parent(p, q are given): check if p is parent, go to parent, remember from where and searh q.
(124) BT maxim sum path: dfs and check 3 sums, return 2

    DP and greedy
climb stairs (1 or 2 steps) how many distinct ways: f[n] = f[n-1]+f[n-2]: dynamic with prev and cur
climb stairs (1 or 2 steps) and cost at every stair: dp: min(prev, prevprev) + value
valid parenthesis: push to stack
best time to buy and sell stock (1 buy): calc min value from left, calc diff, find max diff
best time to buy and sell stock (multy buy): if buying: go while can find less, if selling: go while can find more
house robber (cannot rob 2 adj house): dynamic max(prev, cur+prev_prev)
assign cookies with cj size to kids with gi greedness: sort both, for gi find min cj >= gi
heaters (houses, heaters, find min radius): sort homes, sort heaters, for every house find closest heater and update radius
find minimum abs diff in BST: dfs(lnr) and pass prev_element
lemonade change (lem=5, byers=5 or 10 or 20, you must pay back): counters c5, c10
(055)jump game (nums where we can jump): greedy: find max we can jump from [prev, cur], jump and repeat for [cur, new]
(213) house robber2 (circle houses): 2dp(take 1st or not)
(253) meeting room (return min conf. rooms): greedy: sort by begin, for every b, find closest tail (map[tail]->cnt) and update tail.
(300) LIS: dp(N^2): find answer for all prefixes. For next element go through all prefixes and search best result
(309) best time to buy and sell with cooldown: 3 dp: for last sell: best_buy, max_best_buy, dp
(322) coin change: dp[n] = min(dp[n-c]+1, dp[n])
(368) largest divis subset with ni%nj==0: dp: check for all prev if // and max
(986) interval list intersection: 2 iterators, move less
(042) trapping rain water: 1) using maps: calc area between 2 max and remove them, 2) dp + go forward and backward dp = max_h - hi, min for directions 

    Other
pascal triangle: got line by line and make a triangle
excel columns: 1..26->A..Z, 26+1,...,26+26->AA..AZ
Nim game (can take 1..n): can win if input % (n+1) != 0
fizzBuzz: 1) if n%3, if n%5. 2) same but with counters
construct rectangle from area close to square: w = sqrt(area), l = area / w, w-- while w*l != area
largest time from 4 digits: 1) make max hour, make min, 2) generate next permutation and check it
(227) basic calculator: tokenize, 2 pass(for * and for +)
(356) line reflection (line || y, mirror reflects points): split by y, check all have d -distance to symmetry axis
(375) guess number higher or lower with weights: dp for len, for left and medium
(406) reconstruct queue from height and people before: greedy: sort by height, take smallest, so who  taller -- idx 
(528) random pick with weights: pdf + bin_search
(621) task scheduler: math: max count of symbol (make dict): mc-1 * idle_time + same symbols or task.size()
(743) network delay: while for
(973) k-closest points on 2d: parital-sort or nth-element with lambda
(1041) robot bound in circle (have moving sequence: move, turn left or right): finit: change direction or stayed on the same place

    Graph
(207) course schedule (can be): search cycle in graph (marks: 0, 1, 2)
(210) course schedule2 (schedule): use topological sort and push to vector
(332) reconstruct airplane flights from ticket: make graph
(127) Word ladder (make path for chain of words, changing by 1 letter): make grap and use bfs

    Matrix
calc island perimeter: for all 1s add 4 - num of neighbours
reshape matrix: go throught element(i,j) and copy from mtrx(old_i, old_j)
Toeplitz matrix (all back slash diagonals have same values): go through diag and check value
overlap rectangles: !(x12 <= x21 || x11 >= x22)
transpose matrix: res[j][i] = a[i][j]
matrix and cell in matrix, return all cells in matrix sorted in manhatten distance: bfs
cells with odd values: make set{col, row}
row in matrix 1 and 0, find k with max sum: calc sum and get first k rows
count negatives in row and col-sorted matrix: from end of 1st row, if neg: left, pos: down
lucky num is min in row and max in col: collect mins in row and max in col, check for min element
(036)valid sudoku: 1) add elements to sets, 2) go through and check rules
(048)rotate matrix: 1) a[i][j] = a[n-1-j][i], ..., 2) reflect and transpose
(054)spiral matrix: 4 path
(059)generate spiral matrix: 4 path
(062)unique paths for robot in square matrix: 1) dp (edge == 1), dp[n,m] = n-1,m + n,m-1. 2) combinatoric: can take m vert and n horiz: C(n+m-2,n-1)
(064)min path in matrix: dp (min from up or left), min in graph
(073)set matrix col or row to 0: go through mtx and save to set what to zero
(074)search in 2D matrix: 2 bin search
(130)surrounded regions: graph dfs and set other symbol
(200)number of islands: 1) graph: search linked component, 2) floodfill
(221)maximal square: dp: left, top and left-top
(240)search in matrix: from right top corner: if < down, > left 
(289)life game: use additional matrix or another state value
(304)range sum query 2D: calc integral sums for square (0,0,i,j)
(378)kth smallest element in sorted matrix: binary search in range

    Design
min_stack: 2 stacks: with values and with mins
queue with stacks: 2 stack: push to 1, pop from 2 (st1 -> st2)
range sum query (have array of nums, ask sum in range i,j k times): use integral sums
moving average in sliding window: use queue with fixed size
print only messages if it wasn't printed last TIME_THRES: deque<time, msg>, dict[msg]->iterator_to_deque
guess number higher or lower: binary search
binary watch (get all times for number on-bits): 1) count 1-bit (while (n>0) n&=n-1), 2) nex_permutation
Kth-largest element in stream: max_heap of size k
Hash-map: vector<list<int key,int value>>, 
MaxStack with pop_max: 1) 2 stacks, 2) list data and map[val]->it_list
count calls in treshold: make queue, remove prev values to maintain fix size
(146) LRU: dict[key]->list::itter, list{key, value}
(173) BST iterator: cur_node, stack parents, 
(211) Can add word and search word: trie
(251) flatten 2D vector: IteratorRange for 2D and for 1D
(281) Zigzag iterator: it1, it2, eit1, eit2, is_first
(284) peeking iterator: use cache for peeked value, 0 cache for next
(341) flatten nested list iterator: stack<IteratorRange> and cur IteratorRange
(348) design tic-tac-toe: make counters for rows, cols and diags for every player
(362) hit counter: use queue[value], or queue[{value, counter}]
(380) insert, delete, get random: dict[val]->idx
(622) circular queue: vector with start and end, + size
(676) magic dict (can find word with one changed letter): dict[lenght]->[words]
(900) RLE-iterator (encoded string 3a): have idx and cnt
(981) time-based kv-store: dict[key]->{time_stamp, value}
(1146) snapshot array: vector<vector<cur_snap, val>> and bin_search
(1188) bounded blocking queue: queue with mutex and 2 cond variables
(1381) stack with inc: vector<value, inc for all bottom>
(1396) design underground system: for start and end station find average time
(1429) show first unique number: queue and dict[num]->cnt
(1570) sparse vector, dot product: vector{idx, value}
(295) find median from data stream: make 2 heap (max and min)
(381) insert del rand with duplicates: dict[value]->{idx in vector}, vector of values
(432) all O1 data structure (inc, dec, getMaxKey, getMinKey): dict[key]->list::iterator, list {value, {keys}}
(460) LFU cache (least freaq. used throw up) get, put: frequency always grows, dict[key]->list::iter, dict2[freq]->list<Event>, Event(key, value, freq), min_freq
(895) Maximum freq stack: dict[num]->freq, dict[freq]->[nums] and not pop from dict[freq]->num at push
